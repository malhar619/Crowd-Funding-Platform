import { _ as _defineProperty } from '../../dist/defineProperty-e24c82ea.esm.js';
import * as ed25519 from '@noble/ed25519';
import { Keypair } from '@solana/web3.js';
import bs58 from 'bs58';
import nacl from 'tweetnacl';

class SignerWallet {
  constructor(signer) {
    _defineProperty(this, "type", "solana");
    _defineProperty(this, "signer", void 0);
    this.signer = signer;
  }
  async getAddress() {
    return this.signer.publicKey.toBase58();
  }
  async signMessage(message) {
    const encodedMessage = new TextEncoder().encode(message);
    const signedMessage = await this.signer.signMessage(encodedMessage);
    const signature = bs58.encode(signedMessage);
    return signature;
  }
  async verifySignature(message, signature, address) {
    return nacl.sign.detached.verify(new TextEncoder().encode(message), bs58.decode(signature), bs58.decode(address));
  }
}
class KeypairSigner {
  constructor(keypair) {
    _defineProperty(this, "keypair", void 0);
    _defineProperty(this, "publicKey", void 0);
    this.keypair = keypair;
    this.publicKey = keypair.publicKey;
  }
  async signMessage(message) {
    return ed25519.sync.sign(message, this.keypair.secretKey.slice(0, 32));
  }
}
class KeypairWallet extends SignerWallet {
  constructor(keypair) {
    super(new KeypairSigner(keypair));
  }
}
class PrivateKeyWallet extends KeypairWallet {
  constructor(privateKey) {
    super(Keypair.fromSecretKey(bs58.decode(privateKey)));
  }
}

export { KeypairWallet, PrivateKeyWallet, SignerWallet };
